module FunctionSet.LensOperators exposing (lensOperators)

lensOperators : List String
lensOperators =
  [ "(#) :: AReview t b -> b -> t"
  , "(#%%=) :: MonadState s m => ALens s s a b -> (a -> Tuple r b) -> m r"
  , "(#%%~) :: Functor f => ALens s t a b -> (a -> f b) -> s -> f t"
  , "(#%=) :: MonadState s m => ALens s s a b -> (a -> b) -> m ()"
  , "(#%~) :: ALens s t a b -> (a -> b) -> s -> t"
  , "(#=) :: MonadState s m => ALens s s a b -> b -> m ()"
  , "(#~) :: ALens s t a b -> b -> s -> t"
  , "(%%=) :: forall k s (m :: * -> *) (p :: k -> * -> *) r (a :: k) b. MonadState s m => Over p (Tuple r) s s a b -> p a (Tuple r b) -> m r"
  , "(%%@=) :: MonadState s m => Over (Indexed i) (Tuple r) s s a b -> (i -> a -> Tuple r b) -> m r"
  , "(%%@~) :: forall k i (f :: k -> *) s (t :: k) a (b :: k). Over (Indexed i) f s t a b -> (i -> a -> f b) -> s -> f t"
  , "(%%~) :: forall k (f :: k -> *) s (t :: k) a (b :: k). LensLike f s t a b -> (a -> f b) -> s -> f t"
  , "(%=) :: MonadState s m => ASetter s s a b -> (a -> b) -> m ()"
  , "(%@=) :: MonadState s m => AnIndexedSetter i s s a b -> (i -> a -> b) -> m ()"
  , "(%@~) :: AnIndexedSetter i s t a b -> (i -> a -> b) -> s -> t"
  , "(%~) :: ASetter s t a b -> (a -> b) -> s -> t"
  , "(&) :: a -> (a -> b) -> b"
  , "(&&=) :: MonadState s m => ASetter' s Bool -> Bool -> m ()"
  , "(&&~) :: ASetter s t Bool Bool -> Bool -> s -> t"
  , "(&~) :: s -> State s a -> s"
  , "(**=) :: (MonadState s m, Floating a) => ASetter' s a -> a -> m ()"
  , "(**~) :: Floating a => ASetter s t a a -> a -> s -> t"
  , "(*=) :: (MonadState s m, Num a) => ASetter' s a -> a -> m ()"
  , "(*~) :: Num a => ASetter s t a a -> a -> s -> t"
  , "(+=) :: (MonadState s m, Num a) => ASetter' s a -> a -> m ()"
  , "(+~) :: Num a => ASetter s t a a -> a -> s -> t"
  , "(-=) :: (MonadState s m, Num a) => ASetter' s a -> a -> m ()"
  , "(-~) :: Num a => ASetter s t a a -> a -> s -> t"
  , "(.=) :: MonadState s m => ASetter s s a b -> b -> m ()"
  , "(.>) :: (st -> r) -> (kab -> st) -> kab -> r"
  , "(.@=) :: MonadState s m => AnIndexedSetter i s s a b -> (i -> b) -> m ()"
  , "(.@~) :: AnIndexedSetter i s t a b -> (i -> b) -> s -> t"
  , "(.~) :: ASetter s t a b -> b -> s -> t"
  , "(//=) :: (MonadState s m, Fractional a) => ASetter' s a -> a -> m ()"
  , "(//~) :: Fractional a => ASetter s t a a -> a -> s -> t"
  , "(<#%=) :: MonadState s m => ALens s s a b -> (a -> b) -> m b"
  , "(<#%~) :: ALens s t a b -> (a -> b) -> s -> Tuple b t"
  , "(<#=) :: MonadState s m => ALens s s a b -> b -> m b"
  , "(<#~) :: ALens s t a b -> b -> s -> Tuple b t"
  , "(<%=) :: MonadState s m => LensLike (Tuple b) s s a b -> (a -> b) -> m b"
  , "(<%@=) :: MonadState s m => Over (Indexed i) (Tuple b) s s a b -> (i -> a -> b) -> m b"
  , "(<%@~) :: Over (Indexed i) (Tuple b) s t a b -> (i -> a -> b) -> s -> Tuple b t"
  , "(<%~) :: LensLike (Tuple b) s t a b -> (a -> b) -> s -> Tuple b t"
  , "(<&&=) :: MonadState s m => LensLike' (Tuple Bool) s Bool -> Bool -> m Bool"
  , "(<&&~) :: LensLike (Tuple Bool) s t Bool Bool -> Bool -> s -> Tuple Bool t"
  , "(<&>) :: Functor f => f a -> (a -> b) -> f b"
  , "(<**=) :: (MonadState s m, Floating a) => LensLike' (Tuple a) s a -> a -> m a"
  , "(<**~) :: Floating a => LensLike (Tuple a) s t a a -> a -> s -> Tuple a t"
  , "(<*=) :: (MonadState s m, Num a) => LensLike' (Tuple a) s a -> a -> m a"
  , "(<*~) :: Num a => LensLike (Tuple a) s t a a -> a -> s -> Tuple a t"
  , "(<+=) :: (MonadState s m, Num a) => LensLike' (Tuple a) s a -> a -> m a"
  , "(<+~) :: Num a => LensLike (Tuple a) s t a a -> a -> s -> Tuple a t"
  , "(<-=) :: (MonadState s m, Num a) => LensLike' (Tuple a) s a -> a -> m a"
  , "(<-~) :: Num a => LensLike (Tuple a) s t a a -> a -> s -> Tuple a t"
  , "(<.) :: Indexable i p => (Indexed i s t -> r) -> ((a -> b) -> s -> t) -> p a b -> r"
  , "(<.=) :: MonadState s m => ASetter s s a b -> b -> m b"
  , "(<.>) :: Indexable (i, j) p => (Indexed i s t -> r) -> (Indexed j a b -> s -> t) -> p a b -> r"
  , "(<.~) :: ASetter s t a b -> b -> s -> (b, t)"
  , "(<//=) :: (MonadState s m, Fractional a) => LensLike' (Tuple a) s a -> a -> m a"
  , "(<//~) :: Fractional a => LensLike (Tuple a) s t a a -> a -> s -> Tuple a t"
  , "(<<%=) :: (Strong p, MonadState s m) => Over p (Tuple a) s s a b -> p a b -> m a"
  , "(<<%@=) :: MonadState s m => Over (Indexed i) (Tuple a) s s a b -> (i -> a -> b) -> m a"
  , "(<<%@~) :: Over (Indexed i) (Tuple a) s t a b -> (i -> a -> b) -> s -> Tuple a t"
  , "(<<%~) :: LensLike (Tuple a) s t a b -> (a -> b) -> s -> Tuple a t"
  , "(<<&&=) :: MonadState s m => LensLike' (Tuple Bool) s Bool -> Bool -> m Bool"
  , "(<<&&~) :: LensLike' (Tuple Bool) s Bool -> Bool -> s -> Tuple Bool s"
  , "(<<**=) :: (MonadState s m, Floating a) => LensLike' (Tuple a) s a -> a -> m a"
  , "(<<**~) :: Floating a => LensLike' (Tuple a) s a -> a -> s -> Tuple a s"
  , "(<<*=) :: (MonadState s m, Num a) => LensLike' (Tuple a) s a -> a -> m a"
  , "(<<*~) :: Num a => LensLike' (Tuple a) s a -> a -> s -> Tuple a s"
  , "(<<+=) :: (MonadState s m, Num a) => LensLike' (Tuple a) s a -> a -> m a"
  , "(<<+~) :: Num a => LensLike' (Tuple a) s a -> a -> s -> Tuple a s"
  , "(<<-=) :: (MonadState s m, Num a) => LensLike' (Tuple a) s a -> a -> m a"
  , "(<<-~) :: Num a => LensLike' (Tuple a) s a -> a -> s -> Tuple a s"
  , "(<<.=) :: MonadState s m => LensLike (Tuple a) s s a b -> b -> m a"
  , "(<<.~) :: LensLike (Tuple a) s t a b -> b -> s -> Tuple a t"
  , "(<<//=) :: (MonadState s m, Fractional a) => LensLike' (Tuple a) s a -> a -> m a"
  , "(<<//~) :: Fractional a => LensLike' (Tuple a) s a -> a -> s -> Tuple a s"
  , "(<<<>=) :: (MonadState s m, Semigroup r) => LensLike' (Tuple r) s r -> r -> m r"
  , "(<<<>~) :: Semigroup r => LensLike' (Tuple r) s r -> r -> s -> Tuple r s"
  , "(<<>=) :: (MonadState s m, Semigroup r) => LensLike' (Tuple r) s r -> r -> m r"
  , "(<<>~) :: Semigroup m => LensLike (Tuple m) s t m m -> m -> s -> Tuple m t"
  , "(<<?=) :: MonadState s m => LensLike (Tuple a) s s a (Maybe b) -> b -> m a"
  , "(<<?~) :: LensLike (Tuple a) s t a (Maybe b) -> b -> s -> Tuple a t"
  , "(<<^=) :: (MonadState s m, Num a, Integral e) => LensLike' (Tuple a) s a -> e -> m a"
  , "(<<^^=) :: (MonadState s m, Fractional a, Integral e) => LensLike' (Tuple a) s a -> e -> m a"
  , "(<<^^~) :: (Fractional a, Integral e) => LensLike' (Tuple a) s a -> e -> s -> Tuple a s"
  , "(<<^~) :: (Num a, Integral e) => LensLike' (Tuple a) s a -> e -> s -> Tuple a s"
  , "(<<||=) :: MonadState s m => LensLike' (Tuple Bool) s Bool -> Bool -> m Bool"
  , "(<<||~) :: LensLike' (Tuple Bool) s Bool -> Bool -> s -> Tuple Bool s"
  , "(<<~) :: MonadState s m => ALens s s a b -> m b -> m b"
  , "(<>=) :: (MonadState s m, Semigroup a) => ASetter' s a -> a -> m ()"
  , "(<>~) :: Semigroup a => ASetter s t a a -> a -> s -> t"
  , "(<?=) :: MonadState s m => ASetter s s a (Maybe b) -> b -> m b"
  , "(<?~) :: ASetter s t a (Maybe b) -> b -> s -> Tuple b t"
  , "(<^=) :: (MonadState s m, Num a, Integral e) => LensLike' (Tuple a) s a -> e -> m a"
  , "(<^^=) :: (MonadState s m, Fractional a, Integral e) => LensLike' (Tuple a) s a -> e -> m a"
  , "(<^^~) :: (Fractional a, Integral e) => LensLike (Tuple a) s t a a -> e -> s -> Tuple a t"
  , "(<^~) :: (Num a, Integral e) => LensLike (Tuple a) s t a a -> e -> s -> Tuple a t"
  , "(<|) :: Cons s s a a => a -> s -> s"
  , "(<||=) :: MonadState s m => LensLike' (Tuple Bool) s Bool -> Bool -> m Bool"
  , "(<||~) :: LensLike (Tuple Bool) s t Bool Bool -> Bool -> s -> Tuple Bool t"
  , "(<~) :: MonadState s m => ASetter s s a b -> m b -> m ()"
  , "(?=) :: MonadState s m => ASetter s s a (Maybe b) -> b -> m ()"
  , "(??) :: Functor f => f (a -> b) -> a -> f b"
  , "(?~) :: ASetter s t a (Maybe b) -> b -> s -> t"
  , "(^#) :: s -> ALens s t a b -> a"
  , "(^.) :: s -> Getting a s a -> a"
  , "(^..) :: s -> Getting (Endo [a]) s a -> [a]"
  , "(^=) :: (MonadState s m, Num a, Integral e) => ASetter' s a -> e -> m ()"
  , "(^?) :: s -> Getting (First a) s a -> Maybe a"
  , "(^?!) :: HasCallStack => s -> Getting (Endo a) s a -> a"
  , "(^@.) :: s -> IndexedGetting i (Tuple i a) s a -> Tuple i a"
  , "(^@..) :: s -> IndexedGetting i (Endo [Tuple i a]) s a -> [Tuple i a]"
  , "(^@?) :: s -> IndexedGetting i (Endo (Maybe (Tuple i a))) s a -> Maybe (Tuple i a)"
  , "(^@?!) :: HasCallStack => s -> IndexedGetting i (Endo (Tuple i a)) s a -> Tuple i a"
  , "(^^=) :: (MonadState s m, Fractional a, Integral e) => ASetter' s a -> e -> m ()"
  , "(^^~) :: (Fractional a, Integral e) => ASetter s t a a -> e -> s -> t"
  , "(^~) :: (Num a, Integral e) => ASetter s t a a -> e -> s -> t"
  , "(|>) :: Snoc s s a a => s -> a -> s"
  , "(||=) :: MonadState s m => ASetter' s Bool -> Bool -> m ()"
  , "(||~) :: ASetter s t Bool Bool -> Bool -> s -> t"
  ]
